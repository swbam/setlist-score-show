type Venue {
  id: ID!
  ticketmasterId: String
  setlistfmId: String
  name: String!
  address: String
  city: String!
  state: String
  country: String!
  postalCode: String
  latitude: Float
  longitude: Float
  timezone: String
  capacity: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  
  # Relations
  shows(
    status: ShowStatus
    startDate: DateTime
    endDate: DateTime
    limit: Int = 10
    offset: Int = 0
  ): ShowConnection!
  
  upcomingShows(limit: Int = 10): [Show!]!
  recentShows(limit: Int = 10): [Show!]!
  artists(limit: Int = 20): [Artist!]!
  
  # Computed fields
  totalShows: Int!
  upcomingShowCount: Int!
  nextShow: Show
  stats: VenueStats!
  distanceFrom(latitude: Float!, longitude: Float!): Distance
}

type VenueStats {
  totalShows: Int!
  totalArtists: Int!
  totalVotes: Int!
  averageAttendance: Int
  popularGenres: [GenreCount!]!
}

type Distance {
  kilometers: Float!
  miles: Float!
}

type GenreCount {
  genre: String!
  count: Int!
}

type VenueConnection {
  edges: [VenueEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type VenueEdge {
  node: Venue!
  cursor: String!
}

input VenueFilterInput {
  city: String
  state: String
  country: String
  hasUpcomingShows: Boolean
  search: String
}

input CreateVenueInput {
  name: String!
  address: String
  city: String!
  state: String
  country: String!
  postalCode: String
  latitude: Float
  longitude: Float
  timezone: String
  capacity: Int
  ticketmasterId: String
  setlistfmId: String
}

input UpdateVenueInput {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  country: String
  postalCode: String
  latitude: Float
  longitude: Float
  timezone: String
  capacity: Int
}

extend type Query {
  # Get a single venue
  venue(id: ID!): Venue
  
  # List venues with filtering
  venues(
    filter: VenueFilterInput
    orderBy: VenueOrderBy = NAME
    orderDirection: OrderDirection = ASC
    limit: Int = 20
    cursor: String
  ): VenueConnection!
  
  # Search venues by name or location
  searchVenues(
    query: String!
    limit: Int = 10
  ): [Venue!]!
  
  # Get venues near a location
  nearbyVenues(
    latitude: Float!
    longitude: Float!
    radius: Float = 50 # in kilometers
    limit: Int = 20
  ): [Venue!]!
  
  # Get venues near location (legacy compatibility)
  venuesNearLocation(
    latitude: Float!
    longitude: Float!
    radiusMiles: Float = 50
    limit: Int = 20
  ): [Venue!]!
  
  # Get venues by artist
  venuesByArtist(
    artistId: ID!
    limit: Int = 20
    offset: Int = 0
  ): [Venue!]!
  
  # Get popular venues
  popularVenues(
    timeframe: Timeframe = MONTH
    limit: Int = 10
  ): [Venue!]!
}

extend type Mutation {
  # Admin only - create venue
  createVenue(input: CreateVenueInput!): Venue! @auth(requires: ADMIN)
  
  # Admin only - update venue
  updateVenue(input: UpdateVenueInput!): Venue! @auth(requires: ADMIN)
  
  # Admin only - sync venue from external source
  syncVenue(
    source: ExternalSource!
    externalId: String!
  ): Venue! @auth(requires: ADMIN)
  
  # Admin only - merge duplicate venues
  mergeVenues(
    primaryVenueId: ID!
    secondaryVenueId: ID!
  ): Venue! @auth(requires: ADMIN)
}

enum VenueOrderBy {
  NAME
  CITY
  UPCOMING_SHOWS
  TOTAL_SHOWS
  CREATED_AT
}